# Instructions to use
#
# Set following environment variables (see error messages below for more explanation)
#  - VIVADOTOOLSDIR
#  - VIVADOINSTALLDIR
#
# In your application make flile (see examples/Makefile)
#  - (Optionally) Define variable PACKAGE
#    (make sure to not hand write file $PACKAGE.vhdl, as it will be overwritten)
#  - Define variable SRCS (excluding $PACKAGE.vhdl, xdc files and library sources)
#  - Define variable USE2008=yes if you want to apply VHDL 2008 standard. Default is no
#  - Define variable USEUNISYM=yes to include unisim objects in ghdl simulation
#  - Define variable LIBSRCS to include external sources, these are not added to PACKAGE
#    base name of the source file is treated as the library name
#  - Optionally define variable XDCSRCS (.xdc files)
#  - Optionally define variable IPSRCS (.ip files) if you are using
#    Xilinx IPs. IP file format is documented in bin/ipconfgen.py
#  - Define variable TOP
#  - Define variable PARTNAME (optional)
#  - Tune the UNISIMSDIR variable in this file if different from the default
#  - include this Makefile
#
# Some projects may optionally require these hooks to customize the build process
#  pre-place.tcl: This script will be invoked prior to placing the design. An example
#    of usage of this hook is the nitefury device, in which the LOC property has to be
#    reset and set (see the sample project on their github page)
#
# To include types in the package define type declarations in ${PACKAGE}_types.vhdl
# and do not include this file in SRCS
#
# To include package body in the package define package body in ${PACKAGE}_pbody.vhdl
# and do not include this file in SRCS
#
# Run make with one of the supported targets. Running without target will show
# supported targets.

ifndef VIVADOTOOLSDIR
$(error Please set environment variable VIVADOTOOLSDIR to point to vivadotools directory)
endif

ifndef VIVADOINSTALLDIR
$(error Please set environment variable VIVADOINSTALLDIR to point to vivado installation directory up to vivado version, e.g. /opt/xilinx/Vivado/2022.2)
endif

ifndef SRCS
$(error In your Makefile define variable SRCS to include all .v, .vhdl, .xdc source files)
endif

ifndef TOP
$(error In your Makefile define variable TOP to identify the top module)
endif

VIVADOTOOLSBINDIR	=	$(VIVADOTOOLSDIR)/bin

export	PATH			:=	$(VIVADOTOOLSBINDIR):$(VIVADOINSTALLDIR)/bin:$(PATH)

IPSRCDIR	=	ipsrc
IPDCPFILES	=	$(foreach IP, $(IPSRCS), $(IPSRCDIR)/$(basename $(IP))/$(IP:.ip=.dcp))

IPEXAMPLESDIR	=	ipexamples
IPEXAMPLEFILES	=	$(foreach IP, $(IPSRCS), $(IPEXAMPLESDIR)/$(basename $(IP))/$(IP:.ip=.xci))

ifdef PACKAGE
SRCS_W_PKG	=	$(PACKAGE).vhdl $(SRCS)
else
SRCS_W_PKG	=	$(SRCS)
endif
SRCS_W_XDC	=	$(SRCS_W_PKG) $(XDCSRCS)
SRCS_W_DCP	=	$(SRCS_W_XDC) $(IPDCPFILES)

TYPESFILE	=	$(wildcard $(PACKAGE)_types.vhdl)
PBODYFILE	=	$(wildcard $(PACKAGE)_pbody.vhdl)

GHDLOPTS	=	-frelaxed-rules
ifeq ($(USE2008),yes)
GHDLOPTS	+=	--std=08
endif
UNISIMSDIR	=	/opt/xilinx/Vivado/2022.2/data/vhdl/src/unisims
ifeq ($(USEUNISYM),yes)
UNISIMOBJS	=	unisim-obj08.cf
endif
GHDLOBJS	=	$(notdir $(SRCS_W_PKG:.vhdl=.o))
GHDLLIBOBJS	=	$(notdir $(LIBSRCS:.vhdl=.o))

# Unfortunately no checkpoint representation for "elaboration" step
# So we start targets from synth
all:
	@echo "Please specify target: synth|place|route|bit|edif|bit2hw|clean|dcpclean|package|ghdl|ipexamples"

synth: $(TOP).synth.dcp
place: $(TOP).place.dcp
route: $(TOP).route.dcp
bit: $(TOP).bit
edif: $(TOP).edif
package: $(PACKAGE).vhdl
ipexamples: $(IPEXAMPLEFILES)

$(TOP).synth.dcp:	$(SRCS_W_DCP)
	USE2008=$(USE2008) LIBSRCS="$(LIBSRCS)" SRCS="$(SRCS_W_DCP)" TOP=$(TOP) PARTNAME=$(PARTNAME) vivsh synth
	mv vivado.log synth.log

$(TOP).place.dcp:	$(TOP).synth.dcp
	TOP=$(TOP) vivsh place
	mv vivado.log place.log

$(TOP).route.dcp:	$(TOP).place.dcp
	TOP=$(TOP) vivsh route
	mv vivado.log route.log

$(TOP).bit:	$(TOP).route.dcp
	TOP=$(TOP) vivsh bit
	mv vivado.log bit.log

$(TOP).edif:	$(TOP).route.dcp
	TOP=$(TOP) vivsh edif
	mv vivado.log edif.log

bit2hw:	$(TOP).bit
	vivsh bit2hw $<
	mv vivado.log bit2hw.log

$(PACKAGE).vhdl:	$(SRCS) $(TYPESFILE) $(PBODYFILE) $(IPDCPFILES)
	vhdl2components.sh $(PACKAGE) $(SRCS) $(IPSRCS) > $@

define XCIRULE
$(IPSRCDIR)/$(1)/$(1).dcp:	$(IPSRCDIR)/$(1)/$(1).xci
	PARTNAME=$(PARTNAME) vivsh ipxci2dcp $(IPSRCDIR)/$(1)/$(1).xci
	mv vivado.log $(1).dcp.log

$(IPSRCDIR)/$(1)/$(1).xci:	$(1).ip
	PARTNAME=$(PARTNAME) vivsh ipgen `ipconfgen.py $(1).ip`
	mv vivado.log $(1).xci.log

$(IPEXAMPLESDIR)/$(1)/$(1).xci:	$(1).ip
	PARTNAME=$(PARTNAME) vivsh ipexamples `ipconfgen.py $(1).ip`
	mv vivado.log $(1).example.log

endef

$(eval $(foreach IP,$(IPSRCS),$(call XCIRULE,$(IP:.ip=))))

clean:
	rm -rf *.jou *.log .Xil

dcpclean:
	rm -f *.dcp *.bit

ghdl:	$(TOP) $(UNISIMOBJS)

# If you upgrade ghdl delete this file and build again
$(UNISIMOBJS):
	ghdl -a $(GHDLOPTS) --work=unisim $(UNISIMSDIR)/unisim*.vhd
	ghdl -a -fsynopsys $(GHDLOPTS) --work=unisim $(UNISIMSDIR)/primitive/*.vhd

$(TOP):	$(GHDLLIBOBJS) $(GHDLOBJS)
	ghdl -m $(GHDLOPTS) $(TOP)

define GHDLOBJRULE
$(notdir $(1)).o: $(1).vhdl
	ghdl -a $(GHDLOPTS) $(1).vhdl

endef

define GHDLLIBOBJRULE
$(notdir $(1)).o: $(1).vhdl
	ghdl -a $(GHDLOPTS) --work=$(notdir $(1)) $(1).vhdl

endef

$(eval $(foreach SRC,$(SRCS_W_PKG),$(call GHDLOBJRULE,$(SRC:.vhdl=))))

$(eval $(foreach SRC,$(LIBSRCS),$(call GHDLLIBOBJRULE,$(SRC:.vhdl=))))
